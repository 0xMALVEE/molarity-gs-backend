local anti_aim = require 'gamesense/antiaim_funcs'
local surface = require 'gamesense/surface'
local http = require "gamesense/http" or error("Sub to https://gamesense.pub/forums/viewtopic.php?id=19253 on the lua workshop.")

--AA-STATE
local function include(table, key)
    for i=1, #table do
        if table[i] == key then
            return true, i
        end
    end
    return false, nil
end
local slowwalk, slowwalk_key = ui.reference("AA", "Other", "Slow motion")
local function get_player_state()
    local local_player = entity.get_local_player()

    local last_switch = client.timestamp() - 100000
    local last_weapon

    local player_state = "Unknown"

    local dpa_key = ui.reference("RAGE", "Other", "Duck peek assist")

    local slowwalking = ui.get(slowwalk_key)
    local fakeducking = ui.get(dpa_key)

    if local_player == nil then
        return
    end

    if entity.is_alive(local_player) == false then
        return
    end

    local onground = (bit.band(entity.get_prop(local_player, "m_fFlags"), 1) == 1)
    local induck = (bit.band(entity.get_prop(local_player, "m_fFlags"), 2) == 2)

    local vel_x, vel_y = entity.get_prop(local_player, "m_vecVelocity")
    local vel_real = math.floor(math.min(10000, math.sqrt(vel_x * vel_x + vel_y * vel_y) + 0.5))

    -- pretty obvious
    if onground and not induck and not slowwalking and vel_real < 5.0 then
        player_state = "Standing"
    end

    if onground and not induck and not slowwalking and vel_real > 5.0 then
        player_state = "Moving"
    end

    if onground == false then
        player_state = "Jumping"
    end

    if onground and induck then
        player_state = "Crouching"
    end

    if entity.get_prop(local_player, "m_movetype") == 9 then
        player_state = "On Ladder"
    end

    if onground and not induck and slowwalking then
        player_state = "Slowwalk"
    end

    if onground and fakeducking then
        player_state = "Fakeduck"
    end

    return player_state
end

local ffi = require 'ffi'
function round(num, numDecimalPlaces)
	local mult = 10^(numDecimalPlaces or 0)
	return math.floor(num * mult + 0.5) / mult
end
local extra_log = function(fn, ...)
	local data = { ... }

	for i=1, #data do
		if i==1 then
			local clr = {
				{ 255, 255, 0 },
				{ 255, 0, 0 },
			}

			client.color_log(clr[fn][1], clr[fn][2], clr[fn][3], ' - \0')
		end

		client.color_log(data[i][1], data[i][2], data[i][3],  string.format('%s\0', data[i][4]))

        if i == #data then
            client.color_log(255, 255, 255, ' ')
        end
	end
end
local create_callback = function(name, func)
    local get_func_index = function(fn)
        return ffi.cast("int*", ffi.cast(ffi.typeof("void*(__thiscall*)(void*)"), fn))[0]
    end

    local DEC_HEX = function(IN)
        local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
        while IN>0 do
            I=I+1
            IN,D=math.floor(IN/B),math.fmod(IN,B)+1
            OUT=string.sub(K,D,D)..OUT
        end
        return OUT
    end

    extra_log(2, { 255, 255, 255, 'Creating ' }, { 0, 255, 255, name .. ' ' }, { 255, 255, 255, 'callback ' }, { 0, 255, 255, string.format('(0x%s)', DEC_HEX(get_func_index(func))) })

    client.delay_call(0.1, function()
        client.set_event_callback(name, func)
    end)
end


--Notify
local notify = (function()
    local notify = {callback_registered = false, maximum_count = 7, data = {}, svg_texture = [[<svg id="Capa_1" enable-background="new 0 0 512 512" height="512" viewBox="0 0 512 512" width="512" xmlns="http://www.w3.org/2000/svg"><g><g><path d="m216.188 82.318h48.768v37.149h-48.768z" fill="#ffcbbe"/></g><g><path d="m250.992 82.318h13.964v37.149h-13.964z" fill="#fdad9d"/></g><g><ellipse cx="240.572" cy="47.717" fill="#ffcbbe" rx="41.682" ry="49.166" transform="matrix(.89 -.456 .456 .89 4.732 115.032)"/></g><g><path d="m277.661 28.697c-10.828-21.115-32.546-32.231-51.522-27.689 10.933 4.421 20.864 13.29 27.138 25.524 12.39 24.162 5.829 52.265-14.654 62.769-2.583 1.325-5.264 2.304-8.003 2.96 10.661 4.31 22.274 4.391 32.387-.795 20.483-10.504 27.044-38.607 14.654-62.769z" fill="#fdad9d"/></g><g><path d="m296.072 296.122h-111.001v-144.174c0-22.184 17.984-40.168 40.168-40.168h30.666c22.184 0 40.168 17.984 40.168 40.168v144.174z" fill="#95d6a4"/></g><g><path d="m256.097 111.78h-24.384c22.077 0 39.975 17.897 39.975 39.975v144.367h24.384v-144.367c0-22.077-17.897-39.975-39.975-39.975z" fill="#78c2a4"/></g><g><path d="m225.476 41.375c0-8.811 7.143-15.954 15.954-15.954h34.401c-13.036-21.859-38.163-31.469-57.694-21.453-19.846 10.177-26.623 36.875-15.756 60.503 12.755-.001 23.095-10.341 23.095-23.096z" fill="#756e78"/></g><g><path d="m252.677 25.421h23.155c-11.31-18.964-31.718-28.699-49.679-24.408 10.591 4.287 20.23 12.757 26.524 24.408z" fill="#665e66"/></g><g><path d="m444.759 453.15-28.194-9.144c-3.04-.986-5.099-3.818-5.099-7.014v-4.69l-2.986-8.22h-61.669l-2.986 8.22v34.22c0 8.628 6.994 15.622 15.622 15.622h81.993c5.94 0 10.755-4.815 10.755-10.755v-8.008c.001-4.662-3.002-8.793-7.436-10.231z" fill="#aa7a63"/></g><g><path d="m444.759 453.15-28.194-9.144c-3.04-.986-5.099-3.818-5.099-7.014v-4.69l-2.986-8.22h-25.91v12.911c0 3.196 2.059 6.028 5.099 7.014l28.194 9.144c4.434 1.438 7.437 5.569 7.437 10.23v8.008c0 5.94-4.815 10.755-10.755 10.755h28.896c5.94 0 10.755-4.815 10.755-10.755v-8.008c0-4.662-3.003-8.793-7.437-10.231z" fill="#986b54"/></g><g><path d="m343.827 344.798v87.505h67.64v-123.053c0-20.65-16.74-37.39-37.39-37.39h-189.006v33.212c0 19.014 15.414 34.428 34.428 34.428h119.03c2.926 0 5.298 2.372 5.298 5.298z" fill="#5766cb"/></g><g><path d="m382.571 309.25v123.052h28.896v-123.052c0-20.65-16.74-37.39-37.39-37.39h-28.896c20.65 0 37.39 16.74 37.39 37.39z" fill="#3d4fc3"/></g><g><g><path d="m437.268 512h-108.548c-8.244 0-14.928-6.684-14.928-14.928v-107.221c0-11.247-9.15-20.399-20.398-20.399h-123.543c-8.244 0-14.928-6.684-14.928-14.928v-150.17h-22.748c-8.244 0-14.928-6.684-14.928-14.928s6.684-14.928 14.928-14.928h37.676c8.244 0 14.928 6.684 14.928 14.928v150.17h108.616c27.71 0 50.254 22.545 50.254 50.255v92.293h93.619c8.244 0 14.928 6.684 14.928 14.928s-6.684 14.928-14.928 14.928z" fill="#756e78"/></g></g><g><g><path d="m437.268 482.144h-15.115c8.244 0 14.928 6.684 14.928 14.928s-6.683 14.928-14.928 14.928h15.115c8.244 0 14.928-6.684 14.928-14.928s-6.684-14.928-14.928-14.928z" fill="#665e66"/></g><g><path d="m328.534 389.851v83.296c0 4.969 4.028 8.997 8.997 8.997h6.118v-92.293c0-27.755-22.5-50.255-50.255-50.255h-15.114c27.71 0 50.254 22.545 50.254 50.255z" fill="#665e66"/></g><g><path d="m169.664 189.426v150.17h15.115v-150.17c0-8.244-6.684-14.928-14.928-14.928h-15.115c8.245 0 14.928 6.684 14.928 14.928z" fill="#665e66"/></g></g><g><g><path d="m171.702 511.498c-61.701 0-111.898-50.197-111.898-111.898s50.197-111.898 111.898-111.898 111.898 50.197 111.898 111.898-50.197 111.898-111.898 111.898zm0-193.94c-45.238 0-82.042 36.804-82.042 82.042s36.804 82.042 82.042 82.042 82.042-36.804 82.042-82.042-36.804-82.042-82.042-82.042z" fill="#756e78"/></g></g><g><g><path d="m243.485 313.833c16.3 19.444 26.131 44.485 26.131 71.783 0 61.701-50.197 111.898-111.898 111.898-27.298 0-52.339-9.831-71.783-26.131 20.543 24.504 51.364 40.115 85.767 40.115 61.701 0 111.898-50.197 111.898-111.898 0-34.403-15.61-65.225-40.115-85.767z" fill="#665e66"/></g></g><g><path d="m384.583 259.81 13.927 12.767c8.319 7.626 13.447 18.117 14.353 29.366l.509 6.316c.283 3.513-3.591 5.82-6.545 3.898l-45.845-29.834z" fill="#ffcbbe"/></g><g><path d="m413.372 308.259-.509-6.316c-.906-11.249-6.034-21.74-14.353-29.366l-13.927-12.767-7.744 7.387 5.869 5.38c8.319 7.626 13.447 18.117 14.353 29.366l.328 4.072 9.438 6.142c2.954 1.921 6.828-.386 6.545-3.898z" fill="#fdad9d"/></g><g><g><path d="m366.869 290.965c-1.448 1.448-3.783 1.589-5.341.26-8.038-6.857-18.146-10.594-28.827-10.594h-69.416c-31.072 0-56.26-25.188-56.26-56.26v-63.312c0-12.367 10.025-22.392 22.392-22.392 12.367 0 22.392 10.025 22.392 22.392v63.312c0 6.338 5.138 11.476 11.476 11.476h69.415c22.462 0 43.657 8.238 60.136 23.284 1.672 1.526 1.716 4.151.115 5.752z" fill="#95d6a4"/></g></g><g><path d="m392.836 259.13c-16.479-15.047-37.674-23.284-60.136-23.284h-69.416c-6.338 0-11.476-5.138-11.476-11.476v-63.312c0-12.367-10.025-22.392-22.392-22.392-3.429 0-6.676.773-9.581 2.151 5.315 4.094 8.743 10.518 8.743 17.746v74.508c0 6.338 5.138 11.476 11.476 11.476h69.416c22.462 0 43.657 8.238 60.136 23.284 1.672 1.526 1.716 4.151.115 5.752l-13.663 13.663c1.907 1.181 3.739 2.503 5.469 3.979 1.558 1.329 3.893 1.188 5.341-.26l26.082-26.082c1.602-1.602 1.558-4.226-.114-5.753z" fill="#78c2a4"/></g></g></svg>
]]}
    local svg_size = { w = 20, h = 20}
    local svg = renderer.load_svg(notify.svg_texture, svg_size.w, svg_size.h)
    function notify:register_callback()
        if self.callback_registered then return end
        create_callback('paint_ui', function()
            local screen = {client.screen_size()}
            local color = {15, 15, 15}
            local d = 5;
            local data = self.data;
            for f = #data, 1, -1 do
                data[f].time = data[f].time - globals.frametime()
                local alpha, h = 255, 0;
                local _data = data[f]
                if _data.time < 0 then
                    table.remove(data, f)
                else
                    local time_diff = _data.def_time - _data.time;
                    local time_diff = time_diff > 1 and 1 or time_diff;
                    if _data.time < 0.5 or time_diff < 0.5 then
                        h = (time_diff < 1 and time_diff or _data.time) / 0.5;
                        alpha = h * 255;
                        if h < 0.2 then
                            d = d + 15 * (1.0 - h / 0.2)
                        end
                    end
                    local text_data = {renderer.measure_text("dc", _data.draw)}
                    local screen_data = {
                        screen[1] / 2 - text_data[1] / 2 + 3, screen[2] - screen[2] / 100 * 17.4 + d
                    }
                    renderer.rectangle(screen_data[1] - 30, screen_data[2] - 22, text_data[1] + 60, 2, 227,0,0,255, alpha)
                    renderer.rectangle(screen_data[1] - 29, screen_data[2] - 20, text_data[1] + 58, 29, color[1], color[2],color[3], alpha <= 135 and alpha or 135)
                    renderer.line(screen_data[1] - 30, screen_data[2] - 22, screen_data[1] - 30, screen_data[2] - 20 + 30, 227,0,0,255, alpha <= 50 and alpha or 50)
                    renderer.line(screen_data[1] - 30 + text_data[1] + 60, screen_data[2] - 22, screen_data[1] - 30 + text_data[1] + 60, screen_data[2] - 20 + 30, 227,0,0,255, alpha <= 50 and alpha or 50)
                    renderer.line(screen_data[1] - 30, screen_data[2] - 20 + 30, screen_data[1] - 30 + text_data[1] + 60, screen_data[2] - 20 + 30, 227,0,0,255, alpha <= 50 and alpha or 50)
                    renderer.text(screen_data[1] + text_data[1] / 2 + 10, screen_data[2] - 5, 255, 255, 255, alpha, 'dc', nil, _data.draw)
                    renderer.texture(svg, screen_data[1] - svg_size.w/2 - 5, screen_data[2] - svg_size.h/2 - 5, svg_size.w, svg_size.h, 255, 255, 255, alpha)
                    d = d - 50
                end
            end
            self.callback_registered = true
        end)
    end
    function notify:paint(time, text)
        local timer = tonumber(time) + 1;
        for f = self.maximum_count, 2, -1 do
            self.data[f] = self.data[f - 1]
        end
        self.data[1] = {time = timer, def_time = timer, draw = text}
        self:register_callback()
    end
    return notify
end)()
local js = panorama.open()
local persona_api = js.MyPersonaAPI
local name = persona_api.GetName()

client.color_log(255, 255, 255, "|--------------------------------------------------------|")
client.color_log(21, 235, 220,  "                       Hello " .. name .. "!            ")
client.color_log(215, 115, 222, "                       [Phoenix.lua] Loaded.               ")
client.color_log(255, 255, 255, "|--------------------------------------------------------|")

notify:paint(15, "[+]  If Doesnt Work Pm wan#7777")
notify:paint(10, "[+]  Welcome To noname.lua")
notify:paint(5, "[+] Connecting to the server...")
client.exec("play UI/competitive_accept_beep.wav")
-- Vars Global
AA_EnabledButton = ui.reference("AA", "Anti-aimbot angles", "Enabled")
AA_Pitch = ui.reference("AA", "Anti-aimbot angles", "Pitch")
AA_Yaw_Base = ui.reference("AA", "Anti-aimbot angles", "Yaw Base")
AA_yaw, AA_yaw_s = ui.reference("AA", "Anti-aimbot angles", "Yaw")
AA_j_yaw, AA_j_yaw_s = ui.reference("AA", "Anti-aimbot angles", "Yaw jitter")
AA_b_yaw, AA_b_yaw_s = ui.reference("AA", "Anti-aimbot angles", "Body yaw")
AA_fby = ui.reference("AA", "Anti-aimbot angles", "Freestanding body yaw")
AA_fyaw_limit = ui.reference("AA", "Anti-aimbot angles", "Fake yaw limit")
AA_freestanding,AA_freestanding_key = ui.reference("AA", "Anti-aimbot angles", "Freestanding")
AA_edgeyaw = ui.reference("AA", "Anti-aimbot angles", "Edge yaw")
-- End

aayaw, yaw = ui.reference("AA", "Anti-aimbot angles", "Yaw")
bodyyaw, bodyyaw2 = ui.reference("AA", "Anti-aimbot angles", "Body yaw")
jyaw, jyawslide = ui.reference("AA", "Anti-aimbot angles", "Yaw jitter")
yjitter, yjitterslide  = ui.reference("AA", "Anti-aimbot angles", "Yaw jitter")
yawbase = ui.reference("AA", "Anti-aimbot angles", "Yaw base")
fyawlimit = ui.reference("AA", "Anti-aimbot angles", "Fake yaw limit")
pitch = ui.reference("AA", "Anti-aimbot angles", "Pitch")
freestanding = ui.reference("AA", "Anti-aimbot angles", "Freestanding body yaw")
doubletap = {ui.reference("RAGE", "Other", "Double tap")}
double_tap_fake_lag_limit = ui.reference("RAGE", "Other", "Double tap fake lag limit")
legs_ref = ui.reference("AA", "OTHER", "leg movement")
sv_maxusrcmdprocessticks = ui.reference( "MISC", "Settings", "sv_maxusrcmdprocessticks" )
slowmotion = {ui.reference("AA", "Other", "Slow motion")}
slowmotiontype = ui.reference("AA", "Other", "Slow motion type")
roll = ui.reference("AA", "Anti-aimbot angles", "Roll")

--end
enabled = ui.new_checkbox("AA", "Anti-aimbot angles", "[+] Enable Anti-aim")
MultiSkill = ui.new_multiselect("AA", "Anti-aimbot angles", "Anti-aim multi selection", {"Automatic In Air","Jitter In Air","Moving Jitter","Anti-Bruteforce","Rolls","Manual-AA","Edge Yaw","Legit-AA","Jitter"})
reset_timer = ui.new_slider("AA", "Anti-aimbot angles", "Reset AA after X seconds", 1, 6, 3)
edgeyaw = ui.new_checkbox("AA", "Anti-aimbot angles", "Edge yaw")
edgeyawkey = ui.new_hotkey("AA", "Anti-aimbot angles", "Edge yaw", true)
legitAAE = ui.new_checkbox("AA", "Anti-aimbot angles", "Legit-AA On E")
legitAA = ui.new_hotkey("AA", "Anti-aimbot angles", "Legit-AA Custom Hotkey")
left = ui.new_hotkey("AA", "Anti-aimbot angles", "Manual Left")
right = ui.new_hotkey("AA", "Anti-aimbot angles", "Manual Right")
AutoSwtichhTypeWalk = ui.new_checkbox("AA", "Anti-aimbot angles", "Auto Slowalk Change For Rolls")
freestanding_disablers = ui.new_multiselect('AA', 'Anti-aimbot angles', 'Freestanding disablers','Standing', 'Jumping', 'Crouching', 'Moving', 'Slow motion', 'Duck peek assist')
indicators = ui.new_multiselect("AA", "Anti-aimbot angles", "Extras", 'Phoenix Indicator',"Arrow","Animations","Clantag")
arrow_color = ui.new_color_picker("AA", "Anti-aimbot angles", "Arrow Color", 9, 151, 244, 255)
animations = ui.new_multiselect("AA", "Anti-aimbot angles", "Animations", {"Static Legs", "Leg Breaker", "Pitch 0 On Land"})
tickbase = ui.new_checkbox("AA", "Anti-aimbot angles", "Doubletap Speed")
tickbaseslider = ui.new_slider("AA", "Anti-aimbot angles", "Doubletap Speed", 16, 22, 0, true, "s")

--setting the function for tables
local function setTableVisibility(table, state)
    for i=1, #table do
        ui.set_visible(table[i], state)
    end
end
local function setTableVisibilityS(table)
    for i=1, #table do
        ui.set_visible(table[i], true)
    end
end

local function setTableHidden(table)
    for i=1, #table do
        ui.set_visible(table[i], false)
    end
end

local function contains(table, val)

    for i=1, #table do
        
        if table[i] == val then 
            
            return true
            
        end
        
    end
    
    return false
    
end

local dWeaponPull = {
    ['init'] = 0,
    ['current'] = 0,
    ['safed'] = false,
    ['percentage'] = 0
}

client.set_event_callback('run_command', function()
    local lp = entity.get_local_player()
    if not lp then return end

	local Weapon = entity.get_player_weapon(lp)
	local m_iItemDefinitionIndex = bit.band(entity.get_prop(Weapon, "m_iItemDefinitionIndex"), 0xFFFF)
	local m_flNextAttack = entity.get_prop(lp, "m_flNextAttack")
	local m_flNextPrimaryAttack = entity.get_prop(Weapon, "m_flNextPrimaryAttack")
    dWeaponPull.current = math.max(0, m_flNextPrimaryAttack or 0, m_flNextAttack or 0) - globals.curtime()

    if dWeaponPull.safed and dWeaponPull.current < 0 then 
        dWeaponPull.safed = false
    elseif not dWeaponPull.safed and dWeaponPull.current > 0 then
        dWeaponPull.init = dWeaponPull.current
        dWeaponPull.safed = true
    end

    dWeaponPull.percentage = dWeaponPull.current / dWeaponPull.init
end)


function HideUnhide7()
    if ui.get(enabled) then
        setTableHidden({AA_EnabledButton,AA_yaw_s,AA_j_yaw,AA_j_yaw_s,yjitter,AA_b_yaw,AA_b_yaw_s,AA_fby,AA_fyaw_limit,AA_edgeyaw,AA_Pitch,roll})
        ui.set(AA_EnabledButton,true)
    else
        setTableVisibilityS({AA_EnabledButton,AA_Pitch,AA_Yaw_Base,AA_yaw,AA_yaw_s,yjitter,AA_j_yaw_s,AA_b_yaw,AA_b_yaw_s,AA_fby,AA_fyaw_limit,AA_edgeyaw,roll})
    end
   
end

function Visibility7()
    HideUnhide7()
    if ui.get(enabled) then
        setTableVisibility({MultiSkill,def_cfg,def_cfg2,legitAA,legitAAE,left,right}, true)
    else
        setTableVisibility({MultiSkill,def_cfg,def_cfg2,legitAA,legitAAE,left,right}, false)
    end
    ui.set_visible(legitAA,ui.get(enabled) and ui.get(legitAAE) and contains(ui.get(MultiSkill),"Legit-AA"))
    ui.set_visible(legitAAE,ui.get(enabled) and contains(ui.get(MultiSkill),"Legit-AA"))
    ui.set_visible(right,ui.get(enabled) and contains(ui.get(MultiSkill),"Manual-AA"))
    ui.set_visible(left,ui.get(enabled) and contains(ui.get(MultiSkill),"Manual-AA"))
end

----------CLAN TAG----------
local tag = {
    " ",
    "| ",
    "_| ",
    "P| ",
    "P_| ",
    "PH| ",
    "PH_| ",
    "PHO| ",
    "PHO_| ",
    "PHOE| ",
    "PHOE_| ",
    "PHOEN| ",
    "PHOEN_| ",
    "PHOENI| ",
    "PHOENI_| ",
    "PHOENIX| ",
    "PHOENIX_| ",
    "PHOENIX | ",
    "PHOENIX _| ",
    "PHOENIX Y| ",
    "PHOENIX Y_| ",
    "PHOENIX YA| ",
    "PHOENIX YA_| ",
    "PHOENIX YAW| ",
    "PHOENIX YAW ",
    "PHOENIX YAW ",
    "PHOENIX YAW| ",
    "PHOENIX YA< ",
    "PHOENIX YA| ",
    "PHOENIX Y< ",
    "PHOENIX Y| ",
    "PHOENIX < ",
    "PHOENIX | ",
    "PHOENIX< ",
    "PHOENIX| ",
    "PHOENI< ",
    "PHOENI| ",
    "PHOEN< ",
    "PHOEN| ",
    "PHOE< ",
    "PHOE| ",
    "PHO< ",
    "PHO| ",
    "PH< ",
    "PH| ",
    "P< ",
    "P| ",
    "< ",
    "| ",
    " ",
}

local old_tag = ""

local function time_to_ticks(time)
    return math.floor(time / globals.tickinterval() + 0.2)
end

client.set_event_callback("paint", function()
    if not ui.get(enabled) then
        return
    end
    local tickinterval = globals.tickinterval()
    local tickcount = globals.tickcount() + time_to_ticks(client.latency())
    local i = tickcount / time_to_ticks(0.3)
    i = math.floor(i % #tag)
    i = tag[i+1]

    if include(ui.get(indicators),"Clantag") then
        if old_tag ~= i then
            client.set_clan_tag(i)
            old_tag = i
        end
    end
end)
--tickbase
client.set_event_callback("run_command",function()
    if not ui.get(enabled) then
        return
    end
    if not ui.get(tickbase) then
        return
    end
    if ui.get(tickbase) then
    if ui.get(tickbaseslider) == 16 then
        ui.set(sv_maxusrcmdprocessticks, 16)
    elseif ui.get(tickbaseslider) == 17 then
        ui.set(sv_maxusrcmdprocessticks, 17)
    elseif ui.get(tickbaseslider) == 18 then
        ui.set(sv_maxusrcmdprocessticks, 18)
    elseif ui.get(tickbaseslider) == 19 then
        ui.set(sv_maxusrcmdprocessticks, 19)
    elseif ui.get(tickbaseslider) == 20 then
        ui.set(sv_maxusrcmdprocessticks, 20)
    elseif ui.get(tickbaseslider) == 21 then
        ui.set(sv_maxusrcmdprocessticks, 21)
    elseif ui.get(tickbaseslider) == 22 then
        ui.set(sv_maxusrcmdprocessticks, 22)
    end
   end
end)
client.set_event_callback("shutdown", function()
    ui.set(sv_maxusrcmdprocessticks, 16)
end)

ui.set_visible(sv_maxusrcmdprocessticks,false)
-- fakelag 
local current_fakelag = 0
local lastchoke = 0
local non_current_choke = 0

client.set_event_callback("setup_command", function(e)
    if e ~= nil then
        if e.chokedcommands < lastchoke then --sent
            current_fakelag = lastchoke
        end
        lastchoke = e.chokedcommands
        non_current_choke = e.chokedcommands
    end
end)

local function draw_crosshair_indicators()
    if not ui.get(enabled) then
        return
    end

	local add_value = 0
--	if not ui.get(indicators) then
--		return
	--end
	local crosshair_size = cvar.cl_crosshairsize:get_int()
	
	local position_value = ui.get(indicators) and 90 or crosshair_size + 10
	
	
	local color_g = {ui.get(indicators)} 
        local function hsv_to_rgb(h, s, v, a)
    local r, g, b
    local i = math.floor(h * 6);
    local f = h * 6 - i;
    local p = v * (1 - s);
    local q = v * (1 - f * s);
    local t = v * (1 - (1 - f) * s);
    i = i % 6

    if i == 0 then 
        r, g, b = v, t, p
    elseif i == 1 then
        r, g, b = q, v, p
    elseif i == 2 then
        r, g, b = p, v, t
    elseif i == 3 then
        r, g, b = p, q, v
    elseif i == 4 then
        r, g, b = t, p, v
    elseif i == 5 then
        r, g, b = v, p, q
    end
  
    return r * 255, g * 255, b * 255, a * 255
end

local function func_rgb_rainbowize(frequency, rgb_split_ratio)
    local r, g, b, a = hsv_to_rgb(globals.realtime() * frequency, 1, 1, 1)
    r = r * rgb_split_ratio
    g = g * rgb_split_ratio
    b = b * rgb_split_ratio
    return r, g, b
end

local config = {
    ind_x = 0,
    ind_y = 0,
}

local width, height = client.screen_size()
local center_width = width/2
local center_height = height/2



config.ind_x = width/2
config.ind_y = height/2
doubletap = {ui.reference("RAGE", "Other", "Double tap")}
fakelag = ui.reference("AA", "Fake lag", "Enabled")
fakelag2 = ui.reference("AA", "Fake lag", "Limit")
local shift_true = anti_aim.get_tickbase_shifting()
local y_pos = 0
local alpha = math.min(math.floor(math.sin((globals.realtime()%3) * 4) * 125 + 200), 255)
    if include(ui.get(indicators), "Phoenix Indicator") then
        renderer.text(config.ind_x+6, config.ind_y+50 + y_pos, 5, 155, 255, alpha, "-r", 0, "PHOENIX.LUA");
        y_pos = y_pos + 10
        if get_player_state()  then 
            renderer.text(config.ind_x+6, config.ind_y+50 + y_pos, 247, 125, 49, alpha, "-r", 0, "STATE :", string.upper(get_player_state()))
        else 
            renderer.text(config.ind_x+6, config.ind_y+50 + y_pos, 247, 125, 49, alpha, "-r", 0, "STATE :", string.upper(get_player_state()))
        end
        y_pos = y_pos + 10
        if (ui.get(doubletap[1]) and ui.get(doubletap[2])) and shift_true > 0  then
            renderer.text(config.ind_x, config.ind_y+50 + y_pos, 0,250,154, alpha, "-r", 0, "DOUBLETAP")
            y_pos = y_pos + 10
        elseif (ui.get(fakelag)) then
            renderer.text(config.ind_x-40, config.ind_y+50+ y_pos, alpha,150, 100, 255 , "-r", 0, "FL")
            renderer.rectangle(config.ind_x-35 , config.ind_y+53+ y_pos, ( ( 30 ) / 10 ) * current_fakelag + 1, 5, 5, 155, 255,alpha)
        end
        y_pos = y_pos + 10
    
        if dWeaponPull.percentage > 0 then
            renderer.text(config.ind_x+1, config.ind_y+50 + y_pos, alpha, 126, 0, 255, "-r", 0, "SAFETY  "..math.floor(dWeaponPull.percentage*80).."  %")
        end
        y_pos = y_pos + 10
    end
end
client.set_event_callback("paint", function(ctx)
    if not ui.get(enabled) then
        return
    end
    if not entity.is_alive(entity.get_local_player()) then return end

    local old_x, old_y = client.screen_size()	
    
    if screen_size_x ~= old_x or screen_size_y ~= old_y then
        screen_size_x = old_x
        screen_size_y = old_y
    end
    
    draw_crosshair_indicators()
end)

local flipJitter2 = false
--AA DONT TOUCH!!!
local function MultiSkill7()

    flipJitter2 = not flipJitter2
    if not ui.get(enabled) then 
        return 
    end
    local localplayer = entity.get_local_player()
    local vx, vy = entity.get_prop(localplayer, "m_vecVelocity")
	local velocity = math.floor(math.min(10000, math.sqrt(vx*vx + vy*vy) + 0.5))
    local flags = entity.get_prop(entity.get_local_player(), "m_fFlags")
    if contains(ui.get(MultiSkill), "Jitter In Air") and flags == 256 then
        ui.set(yaw, -5)
        ui.set(yjitter, "Center")
        ui.set(yjitterslide, -74)
        ui.set(bodyyaw, "Jitter" or "Static")
        ui.set(bodyyaw2, -146)
        ui.set(freestanding, false)
        ui.set(fyawlimit, client.random_int(25, 59))
    end
    if ui.get(enabled) then
        ui.set(bodyyaw2, -146)
        ui.set(yjitter, "Center")
        ui.set(freestanding, true)
        ui.set(bodyyaw, "Static" or "Jitter")
    end
    if contains(ui.get(MultiSkill), "Jitter") then
        ui.set(yaw, -10)
        ui.set(yjitter, "Center")
        ui.set(yjitterslide, 80)
        ui.set(bodyyaw, "Jitter" or "Static")
        ui.set(bodyyaw2, -146)
        ui.set(freestanding, false)
        ui.set(fyawlimit, client.random_int(25, 59))
    end
    if ui.get(legitAA) then
        ui.set(yaw, 180)
        ui.set(bodyyaw2, 133)
        ui.set(bodyyaw, "Static" or "Jitter")
        ui.set(fyawlimit, flipJitter2 and 55 or 60)
        ui.set(freestanding, true)
        ui.set(pitch, "Down")
        ui.set(AA_freestanding, "-")
    else
        ui.set(pitch, "Minimal")
        ui.set(yaw, 5)
        ui.set(bodyyaw2, -146)
        ui.set(fyawlimit, 60)
        ui.set(yjitter, "Center")
        ui.set(freestanding, true)
        ui.set(bodyyaw, "Static" or "Jitter")
        ui.set(AA_freestanding, "Default")
    end
    --slowmotion
    if ui.get(slowmotion[1]) and ui.get(slowmotion[2]) then
        ui.set(bodyyaw2, client.random_int(45, 50))
        ui.set(yjitter, "Center")
        ui.set(freestanding, false)
        ui.set(bodyyaw, "Static" or "Jitter")
        ui.set(fyawlimit, 42) 
    else
        ui.set(bodyyaw2, -146)
    end
    --moving
    if contains(ui.get(MultiSkill), "Moving Jitter") and flags == 257 and velocity > 10 and velocity < 250 then
        ui.set(yjitter, "Center")
        ui.set(jyawslide, 55)
        ui.set(bodyyaw, "Static" or "Jitter")
        ui.set(freestanding, true)
    end
    if ui.get(slowmotion[1]) and ui.get(slowmotion[2]) then
        ui.set(bodyyaw2, client.random_int(45, 50))
        ui.set(yjitter, "Center")
        ui.set(freestanding, true)
        ui.set(bodyyaw, "Static" or "Jitter")
        ui.set(fyawlimit, 22) 
    else
        ui.set(bodyyaw2, -146)
    end

    if ui.get(AutoSwtichhTypeWalk) and ui.get(slowmotion[2]) then
      ui.set(slowmotiontype, "Favor anti-aim")
    else
        ui.set(slowmotiontype, "Favor high speed")
    end
    if ui.get(left) then
    ui.set(yaw, -90)
    end
    if ui.get(right) then
        ui.set(yaw, 90)
    end
end

-- rolls
client.set_event_callback("setup_command", function()
    if not ui.get(enabled) then
        return
    end
    local aa_value = ui.get(roll)  
    
    local function randomJitter()    
        if not ui.get(enabled) then
            return
        end  
        if(aa_value > 1) then
            ui.set(roll, math.random(-50, -45)) 
        else
            ui.set(roll, math.random(50, 45))  
        end
    end

    if contains(ui.get(MultiSkill), "Rolls") then  
        client.delay_call(0.01, randomJitter)
    end
end)

--Freestanding Disable
client.set_event_callback('paint_ui', function()
    if not entity.is_alive(entity.get_local_player()) then 
        return 
    end
    if entity.get_local_player() == nil then return end
    if not ui.get(enabled) then
       return
    end
    ui.set(AA_freestanding_key, 'Always on')

    if contains(ui.get(freestanding_disablers), 'Standing') then
        if get_player_state() == 'Standing' then
            ui.set(AA_freestanding_key, 'On hotkey' or 'Always on')
        end
    end
    if contains(ui.get(freestanding_disablers), 'Jumping') then
        if get_player_state() == 'Jumping' then
            ui.set(AA_freestanding_key, 'On hotkey' or 'Always on')
        end
    end

    if contains(ui.get(freestanding_disablers), 'Crouching') then
        if get_player_state() == 'Crouching' then
            ui.set(AA_freestanding_key, 'On hotkey' or 'Always on')
        end
    end

    if contains(ui.get(freestanding_disablers), 'Moving') then
        if get_player_state() == 'Moving' then
            ui.set(AA_freestanding_key, 'On hotkey' or 'Always on')
        end
    end

    if contains(ui.get(freestanding_disablers), 'Slow motion') then
        if get_player_state() == 'Slowwalk' then
            ui.set(AA_freestanding_key, 'On hotkey' or 'Always on')
        end
    end

    if contains(ui.get(freestanding_disablers), 'Duck peek assist') then
        if get_player_state() == 'Fakeduck' then
            ui.set(AA_freestanding_key, 'On hotkey' or 'Always on')
        end
    end
    if ui.get(edgeyawkey) then
        ui.set(AA_edgeyaw, true)
    else 
        ui.set(AA_edgeyaw, false)
    end
end)

local function paint()
    if not entity.is_alive(entity.get_local_player()) then
        return
    end
    if not ui.get(enabled) then
        return
    end
    local alpha = 1 + math.sin(math.abs(-math.pi + (globals.realtime() * (1 / 0.5)) % (math.pi * 2))) * 219 
    if include(ui.get(indicators),"Arrow") then
        alpha = 1 + math.sin(math.abs(-math.pi + (globals.realtime() * (1 / 0.5)) % (math.pi * 2))) * 219
    else
        alpha = a     
    end
    if include(ui.get(indicators), "Arrow") then
        local screen = {client.screen_size()}
        local center = {screen[1]/2, screen[2]/2}
        r, g, b, a = ui.get(arrow_color)

        fyawlimit2 = math.max(-40, math.min(40, round((entity.get_prop(entity.get_local_player(), "m_flPoseParameter", 11) or 0)*120-60+0.5, 1)))
        if fyawlimit2 < 0 then
          renderer.text(center[1] - 62, center[2] - 0,r,g,b,alpha, "+cb", nil, "<")
          renderer.text(center[1] + 62, center[2] - 0,255,255,255,alpha, "+cb", 0, ">")
        else
            renderer.text(center[1] - 62, center[2] - 0,255,255,255,alpha, "+cb", 0, "<")
            renderer.text(center[1] + 62, center[2] - 0,r,g,b,alpha, "+cb", nil, ">")
        end
    end
end
create_callback("setup_command",function(e)
    if not ui.get(enabled) then
        return
    end
    local weaponn = entity.get_player_weapon()
    if ui.get(legitAAE) then
        if weaponn ~= nil and entity.get_classname(weaponn) == "CC4" then
            if e.in_attack == 1 then
                e.in_attack = 0 
                e.in_use = 1
            end
        else
            if e.chokedcommands == 0 then
                e.in_use = 0
            end
        end
        ui.set(freestanding, true)
end
end)

--antibruteforce
local table_pack, table_sort, table_remove, table_unpack, table_concat, table_insert = table.pack, table.sort, table.remove, table.unpack, table.concat, table.insert
local globals_realtime, globals_absoluteframetime, globals_tickcount, globals_lastoutgoingcommand, globals_curtime, globals_mapname, globals_tickinterval, globals_framecount, globals_frametime, globals_maxplayers = globals.realtime, globals.absoluteframetime, globals.tickcount, globals.lastoutgoingcommand, globals.curtime, globals.mapname, globals.tickinterval, globals.framecount, globals.frametime, globals.maxplayers
local table_insert = table.insert
local table_remove = table.remove
local globals_realtime = globals.realtime
local globals_tickcount = globals.tickcount
local globals_tickinterval = globals.tickinterval
local globals_frametime = globals.frametime
local globals_absoluteframetime = globals.absoluteframetime
local client_draw_text = client.draw_text
local client_screen_size = client.screen_size
local ui_get = ui.get
local ui_set_visible = ui.set_visible
local math_floor = math.floor
local math_sqrt = math.sqrt
local math_min = math.min
local math_abs = math.abs
local string_format = string.format


local reset_time = 0
local timer_indicator = 0

--reference
local _, slider = ui.reference("AA", "Anti-aimbot angles", "Body yaw")
local slider2 = ui.reference("AA", "Anti-aimbot angles", "Fake yaw limit")
local bodyyaw, yaw = ui.reference("AA", "Anti-aimbot angles", "Body Yaw")
local yawbase = ui.reference("AA", "Anti-aimbot angles", "Yaw Base")
local freestanding_body_yaw = ui.reference("AA", "Anti-aimbot angles", "Freestanding body yaw")

local angle = 0
create_callback("setup_command", function(c)
	if c.chokedcommands == 0 then
		if c.in_use == 1 then
			angle = math.min(57, math.abs(entity.get_prop(entity.get_local_player(), "m_flPoseParameter", 11)*120-60))
		else
			angle = math.min(57, math.abs(entity.get_prop(entity.get_local_player(), "m_flPoseParameter", 11)*120-60))
		end
	end
end)

local function contains(table, val)

    for i=1, #table do
        
        if table[i] == val then 
            
            return true
            
        end
        
    end
    
    return false
    
end

local function includes( table, key )
    local state = false
    for i=1, #table do
        if table[i] == key then
            state = true
            break
        end
    end 
    return state
end

local function GetClosestPoint(A, B, P)
    local a_to_p = { P[1] - A[1], P[2] - A[2] }
    local a_to_b = { B[1] - A[1], B[2] - A[2] }

    local atb2 = a_to_b[1]^2 + a_to_b[2]^2

    local atp_dot_atb = a_to_p[1]*a_to_b[1] + a_to_p[2]*a_to_b[2]
    local t = atp_dot_atb / atb2
    
    return { A[1] + a_to_b[1]*t, A[2] + a_to_b[2]*t }
end

local should_swap = false
local it = 0
local angles = { 60, 20, -60 }
create_callback("bullet_impact", function(c)
	  if contains(ui.get(MultiSkill),"Anti-Bruteforce") and entity.is_alive(entity.get_local_player()) then
        local ent = client.userid_to_entindex(c.userid)
        if not entity.is_dormant(ent) and entity.is_enemy(ent) then
            local ent_shoot = { entity.get_prop(ent, "m_vecOrigin") }
            ent_shoot[3] = ent_shoot[3] + entity.get_prop(ent, "m_vecViewOffset[2]")
            local player_head = { entity.hitbox_position(entity.get_local_player(), 0) }
            local closest = GetClosestPoint(ent_shoot, { c.x, c.y, c.z }, player_head)
            local delta = { player_head[1]-closest[1], player_head[2]-closest[2] }
            local delta_2d = math.sqrt(delta[1]^2+delta[2]^2)
        
            if math.abs(delta_2d) < 40 then
                it = it + 1
                should_swap = true
            end
        end
    end
end)

local function on_prestart() -- reset angles when round restart

    reset_time = -1
	timer_indicator = -1

	if ui.get(MultiSkill) == "Anti-Bruteforce" then
			
			
    end
end

local function indicator(c)
    if not ui.get(enabled) then
        return
    end
    local flags = entity.get_prop(entity.get_local_player(), "m_fFlags")
    local screen = {client.screen_size()}
    local center = {screen[1]/2, screen[2]/2}
	local speed = 45
	
	if should_swap == true then
	    timer_indicator = globals.curtime() + ui.get(reset_timer)
    end
	
	--Set Static bodyyaw and freestanding
	if contains(ui.get(MultiSkill),"Anti-Bruteforce") then
	end	

	
	--Anti-Bruteforce indicator
if contains(ui.get(MultiSkill),"Anti-Bruteforce") and entity.is_alive(entity.get_local_player()) and globals.curtime() < timer_indicator then
     r, g, b, a = ui.get(arrow_color)
    local alpha = 1 + math.sin(math.abs(-math.pi + (globals.realtime() * (1 / 0.5)) % (math.pi * 2))) * 219 
    if include(ui.get(MultiSkill),"Arrow") then
        alpha = 1 + math.sin(math.abs(-math.pi + (globals.realtime() * (1 / 0.5)) % (math.pi * 2))) * 219
    else
        alpha = a     
    end
        fyawlimit2 = math.max(-40, math.min(40, round((entity.get_prop(entity.get_local_player(), "m_flPoseParameter", 11) or 0)*120-60+0.5, 1)))
    if fyawlimit2 < 0 then
        renderer.text(center[1] - 75, center[2] - 0,r,g,b,alpha, "+cb", nil, "<")
    else
        renderer.text(center[1] + 75, center[2] - 0,r,g,b,alpha, "+cb", nil, ">")
	end
end
if contains(ui.get(MultiSkill),"Anti-Bruteforce") and entity.is_alive(entity.get_local_player()) and globals.curtime() < timer_indicator then
        ui.set(yaw, -10)
        ui.set(yjitter, "Center")
        ui.set(yjitterslide, -76)
        ui.set(bodyyaw, "Jitter" or "Static")
        ui.set(bodyyaw2, -146)
        ui.set(freestanding, false)
        ui.set(fyawlimit, client.random_int(25, 59))
        
    elseif contains(ui.get(MultiSkill),"Anti-Bruteforce") and entity.is_alive(entity.get_local_player()) and globals.curtime() > timer_indicator then
        ui.set(yaw, 5)
        ui.set(bodyyaw2, -146)
        ui.set(yjitterslide, 5)
        ui.set(fyawlimit, 60)
        ui.set(yjitter, "Center")
        ui.set(freestanding, true)
        ui.set(bodyyaw, "Static" or "Jitter")
    end
    if contains(ui.get(MultiSkill),"Automatic In Air") and entity.is_alive(entity.get_local_player()) and globals.curtime() < timer_indicator and flags == 256 then
        ui.set(doubletap[1], false)
        ui.set(doubletap[2], "On hotkey")
    else
        ui.set(doubletap[1], true)
        ui.set(doubletap[2], "toggle")
    end	  
end

create_callback("round_prestart", on_prestart)
create_callback("paint", indicator)
local ref_fake_lag_limit = ui.reference ( "AA", "Fake lag", "Limit" )
create_callback("paint", function() --Indicator
    ui.set_visible(reset_timer,ui.get(enabled) and contains(ui.get(MultiSkill),"Anti-Bruteforce"))
    if ui.get(MultiSkill) and should_swap then
        local table = {"-60","60", "15","-20","30","-30"} -- random bodyyaw value
        local value2 = math.random(1,#table)
        local picked_value2 = table[value2]
        
        local table = {"20","7","58","42","35"} -- random fakeyaw value
        local value3 = math.random(1,#table) 
        local picked_value3 = table[value3]
        
        local actualbodyyaw = picked_value2
        local actualfakeyaw = picked_value3  
		
        if contains(ui.get(MultiSkill),"Anti-Bruteforce") then
            ui.set(slider, actualbodyyaw)
            ui.set(slider2, actualfakeyaw) 
        end
        should_swap = false
    end
end)

local ground_ticks, end_time = 1, 0
fakelag2 = ui.reference("AA", "Fake lag", "Limit")
--animations
local function Visual7()
    if include(ui.get(animations), "Static Legs") then
        entity.set_prop(entity.get_local_player(), "m_flPoseParameter", 1, 6) 
    end
    if include(ui.get(animations), "Leg Breaker") then
        local legs_int = client.random_int(1, 3)
        if legs_int <= 1 then
          ui.set(legs_ref, "always slide")
        end
        if legs_int == 2 then
          ui.set(legs_ref, "never slide")
        end
        if legs_int >= 3 then
          ui.set(legs_ref, "never slide")
        end
    end
    
    if entity.is_alive(entity.get_local_player()) then

    if include(ui.get(animations), "Pitch 0 On Land") then
        local on_ground = bit.band(entity.get_prop(entity.get_local_player(), "m_fFlags"), 1)

        if on_ground == 1 then
            ground_ticks = ground_ticks + 1
        else
            ground_ticks = 0
            end_time = globals.curtime() + 1
        end 
    
        if ground_ticks > ui.get(fakelag2)+1 and end_time > globals.curtime() then
            entity.set_prop(entity.get_local_player(), "m_flPoseParameter", 0.5, 12)
        end
    end 
end end
create_callback("pre_render", Visual7)


--local text_phoenix_bottom = ui.new_label("aa", "anti-aimbot angles", "( PHOENIX )")
--local lua_resolver_loaded = 0
--local load_resolver_lua = ui.new_button("aa", "anti-aimbot angles", "Load resolver", function()
--    http.get("put the lua api", function(success, response) -- goes to my github now
--    if not success or response.status ~= 200 then
--       return
--    end
--    if lua_resolver_loaded == 0 then
--        loadstring(response.body)()
--    end

 --   ui.set(text_phoenix_bottom, "( PHOENIX ) Resolver lua loaded!")
 --   lua_resolver_loaded = 1
  --  end)
--end)

client.set_event_callback("run_command", function()
    if lua_resolver_loaded == 1 then
        ui.set_visible(load_resolver_lua, false)
    end
end)

local function loadDef()
    ui.set(indicators,'Phoenix Indicator',"Arrow","Animations")
	ui.set(MultiSkill,"Automatic In Air","Moving Jitter","Edge Yaw","Legit-AA","Manual-AA","Anti-Bruteforce")
    ui.set(animations,"Static Legs", "Leg Breaker", "Pitch 0 On Land")
    ui.set(freestanding_disablers,"Slow Motion", "Jumping")
    ui.set(legitAAE,true)
end
local function loadDef2()
	ui.set(MultiSkill,"-")
    ui.set(animations,"-")
    ui.set(indicators,"-")
    ui.set(freestanding_disablers,"-")
    ui.set(legitAAE,false)
end
paint()
local function Paint7()
    paint()
    Visibility7()
end
def_cfg = ui.new_button("AA", "Anti-aimbot angles", "Load default", loadDef)
def_cfg2 = ui.new_button("AA", "Anti-aimbot angles", "Reset default", loadDef2)
local labelA                        = ui.new_label             ("AA", "Anti-aimbot angles", "**************************")
local labelB                        = ui.new_label             ("AA", "Anti-aimbot angles", "      Hello " .. name .. "!")
local labelC                        = ui.new_label             ("AA", "Anti-aimbot angles", "Phoenix Yaw Version : 5.0.1")
local labelD                        = ui.new_label             ("AA", "Anti-aimbot angles", "**************************")
function Visibility7()
    HideUnhide7()
    if ui.get(enabled) then
        setTableVisibility({MultiSkill,def_cfg,def_cfg2,legitAA,legitAAE,left,right,labelA,labelB,labelC,labelD,indicators,freestanding_disablers,edgeyaw,AutoSwtichhTypeWalk,tickbase,tickbaseslider}, true)
    else
        setTableVisibility({MultiSkill,def_cfg,def_cfg2,legitAA,legitAAE,left,right,labelA,labelB,labelC,labelD,indicators,freestanding_disablers,edgeyaw,AutoSwtichhTypeWalk,tickbase,tickbaseslider}, false)
    end
    ui.set_visible(legitAA,ui.get(enabled) and ui.get(legitAAE) and contains(ui.get(MultiSkill),"Legit-AA"))
    ui.set_visible(legitAAE,ui.get(enabled) and contains(ui.get(MultiSkill),"Legit-AA"))
    ui.set_visible(right,ui.get(enabled) and contains(ui.get(MultiSkill),"Manual-AA"))
    ui.set_visible(left,ui.get(enabled) and contains(ui.get(MultiSkill),"Manual-AA"))
    ui.set_visible(animations,ui.get(enabled) and include(ui.get(indicators),"Animations"))
    ui.set_visible(arrow_color, ui.get(enabled) and include(ui.get(indicators),"Arrow"))
    ui.set_visible(edgeyaw,ui.get(enabled) and contains(ui.get(MultiSkill),"Edge Yaw"))
    ui.set_visible(edgeyawkey,ui.get(enabled) and contains(ui.get(MultiSkill),"Edge Yaw"))
    ui.set_visible(tickbaseslider, ui.get(enabled) and ui.get(tickbase))
end

create_callback("run_command", MultiSkill7) 
create_callback("paint_ui", Paint7)